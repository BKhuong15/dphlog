<?php
function phpUnserializePage()
{
  $sample = 'Hello World';
  $example = htmlWrap('span', serialize($sample)) . '<br>';
  $example .= htmlWrap('span', base64_encode(serialize($sample)));
  $template = new HTMLTemplate();
  $template->setTitle('Unserialize');
  $template->addCssFilePath('/modules/unserialize/unserialize.css');
  $template->addJsFilePath('/modules/unserialize/unserialize.js');

  $template->setMenu(menu());


  $form = new Form('unserialize');

  $field = new FieldCheckbox('base64-check', 'Base64 Decode');
  $form->addField($field);

  $field = new FieldCheckbox('unserialize-check', 'Unserialize');
  $form->addField($field);

  $field = new FieldTextarea('string-input', 'JSON String Input');
  $form->addField($field);

  $field = new FieldSubmit('submit', 'Submit');
  $form->addField($field);

  $body = $form . htmlWrap('pre', '', array('class' => array('unserialize_output')));
  $template->setBody(htmlWrap('h1', 'Unserialize') . $example .  $body);
  return $template;
}

function phpUnserializeAjax()
{
  $response = array(
    'status' => true, // True or False depending on whether the request is successful or not.
    'data' => '', // Data generated by the response.
  );
  try
  {
    // If operation parameter is not set, throw exception.
    if (!isset($_GET['operation']))
    {
      throw new Exception('operation parameter is required.');
    }
    $operation = $_GET['operation'];
    switch ($operation)
    {
      case 'view':
      {
        if ($_SERVER['REQUEST_METHOD'] !== 'POST')
        {
          throw new Exception('Expected post method.');
        }
        // Checks if raw input data is set.
        if (!isset($_POST['raw_input']))
        {
          throw new Exception('Where is my data?');
        }

        // Checks if these variables are in the post array, if not set to 1.
        // Base64 and serialized are optional. If not set, assume its set and move forward.
        $base_64 = isset($_POST['base_64']) ? $_POST['base_64'] : 0;
        $serialized = isset($_POST['serialized']) ? $_POST['serialized'] : 0;

        $raw_input = $_POST['raw_input'];

        // If base64 decode is checked...
        if ($base_64)
        {
          $raw_input = base64_decode($raw_input);

          error_log('base 64 if statement entered');
          // Check to make sure the raw input can actually be decoded.
          if ($raw_input === false)
          {
            throw new Exception('Cannot base64 decode. Or result is false.');
          }
        }

        // Then if unserialize is checked...
        if ($serialized)
        {
          $raw_input = @unserialize($raw_input);

          // Check to make sure the raw input can be unserialized.
          if ($raw_input === false)
          {
            throw new Exception('Cannot unserialize string. Or results is false.');
          }
        }
        //$converted_input = base64_decode($raw_input);
        $response['data'] = $raw_input;

        // Break statement needed for the case.
        break;
      }
      default:
      {
        throw new Exception('Unknown operation.');
      }
    }
  }
  catch (Exception $e)
  {
    $response['status'] = false;
    $response['data'] = $e->getMessage();
  }
  header('Content-Type: application/json');
  echo json_encode($response, JSON_PARTIAL_OUTPUT_ON_ERROR);
  die();
}

// base64/serialzed- YToyOntzOjQ6Im5hbWUiO3M6MToiNCI7czoxMDoic2VxdWVudGlhbCI7czoyOiIyIjt9
// serialized- a:2:{s:4:"name";s:1:"4";s:10:"sequential";s:1:"2";}
